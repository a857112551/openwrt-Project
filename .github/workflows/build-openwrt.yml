#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        type : boolean
      REPO_BRANCH:
        description: '源码-请选择分支'
        required: true
        default: 'openwrt-21.02'
        type: choice
        options:
          - 'openwrt-21.02'
          - 'openwrt-18.06-k5.4'
          - 'openwrt-18.06'
          - 'master'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone 'Asia/Shanghai'
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 下载固件源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b ${{ github.event.inputs.REPO_BRANCH }} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="%0AAuthor: %an%0Adate: %cd%0Acommit: %s%0Acommit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV

    - name: 加载自定义设置
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        echo "times=$(date +%s)" >> $GITHUB_ENV
        echo "TARGET_BOARD=x86" >> $GITHUB_ENV

    - name: 下载更新插件
      run: cd openwrt && ./scripts/feeds update -a

    - name: 读取安装插件
      run: cd openwrt && ./scripts/feeds install -a

    - name: 更改配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        # 生成在线更新配置
        cat >"${GITHUB_WORKSPACE}/openwrt/package/base-files/files/etc/openwrt_update" <<-EOF
        GITHUB_LINK=https://github.com/${{github.repository}}
        CURRENT_Version=Immortalwrt-x86-64-${{ env.times }}
        SOURCE="Immortalwrt"
        LUCI_EDITION="${{ github.event.inputs.REPO_BRANCH }}"
        DEFAULT_Device="x86-64"
        Firmware_SFX=".img.gz"
        TARGET_BOARD="${{ env.TARGET_BOARD }}"
        CLOUD_CHAZHAO="Immortalwrt-x86-64"
        Download_Path="/tmp/Downloads"
        Version="8.0"
        API_PATH="/tmp/Downloads/zzz_api"
        Github_API1="https://api.github.com/repos/${{github.repository}}/releases/tags/${{ env.TARGET_BOARD }}"
        Github_API2="${{ secrets.GIT_SPEED }}https://github.com/${{github.repository}}/releases/download/${{ env.TARGET_BOARD }}/zzz_api"
        Github_Release="https://github.com/${{github.repository}}/releases/tag/${{ env.TARGET_BOARD }}"
        Release_download1="https://github.com/${{github.repository}}/releases/download/${{ env.TARGET_BOARD }}"
        Release_download2="${{ secrets.GIT_SPEED }}https://github.com/${{github.repository}}/releases/download/${{ env.TARGET_BOARD }}"
        EOF
        sudo chmod +x ${GITHUB_WORKSPACE}/openwrt/package/base-files/files/etc/openwrt_update

    - name: SSH链接管理
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载安装包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FILE_TIME=$(date "+%Y年%m月%d日-%H点")" >> $GITHUB_ENV
        echo "TAG_TIME=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV

    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传bin压缩目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/packages/x86_64

    - name: 整理编译好的固件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*esxi-flat.vmdk*" | xargs -i mv -f {} packages
        find -name "*kernel.bin*" | xargs -i mv -f {} packages
        find -name "*rootfs*" | xargs -i mv -f {} packages
        find -name "*.manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到github
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
                        
    - name: 创建release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.TAG_TIME }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "[固件源码](https://github.com/immortalwrt/immortalwrt/tree/master)" >> release.txt
        echo "由衷感谢所有为openwrt无私奉献的大佬们" >> release.txt
        echo "📥 固件下载" >> release.txt
        echo "🔗 [github release](https://github.com/${{github.repository}}/releases/tag/${{ env.TAG_TIME }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 发布至release
      uses: softprops/action-gh-release@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_KEY }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: 固件发布-${{ env.TAG_TIME }}
        tag_name: ${{ env.TAG_TIME }}
        body_path: release.txt
    
    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_KEY }}
            
    #- name: 测试用环境
    #  id: test
    #  if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
    #  run: |
    #    mkdir -p test
    #    cd test
    #    echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    #    echo "TAG_TIME=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
    #    echo "status=success" >> $GITHUB_OUTPUT
    
    - name: 创建在线更新release标签
      id: autoupdatetag1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        cd ${{ env.FIRMWARE }}
        mkdir -p autoupdaterelease
        cd autoupdaterelease
        touch release.txt
        echo "在线更新用部分，请勿删除" >> release.txt
        echo "更新时间：${{ env.TAG_TIME }}" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
            
    - name: 发布在线更新release标签
      id: autoupdatetag2
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      uses: softprops/action-gh-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_KEY }}
      with:
        name: AutoUpdate
        tag_name: x86
        body_path: "${{ env.FIRMWARE }}/autoupdaterelease/release.txt"
            
    - name: 计算自动更新文件md5
      id: autoupdateMD5
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        EFIMD5="$(md5sum ${{ env.FIRMWARE }}/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz |cut -c1-3)$(sha256sum ${{ env.FIRMWARE }}/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz |cut -c1-3)"
        echo "EFIMD5=$EFIMD5" >> $GITHUB_ENV
            
        LEGAMD5="$(md5sum ${{ env.FIRMWARE }}/immortalwrt-x86-64-generic-squashfs-combined.img.gz |cut -c1-3)$(sha256sum ${{ env.FIRMWARE }}/immortalwrt-x86-64-generic-squashfs-combined.img.gz |cut -c1-3)"
        echo "LEGAMD5=$LEGAMD5" >> $GITHUB_ENV
                    
    - name: 发布在线更新步骤1
      id: autoupdate1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        cd ${{ env.FIRMWARE }}
        mkdir -p Github_Api
        cd Github_Api
        cp ${{ env.FIRMWARE }}/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz Immortalwrt-x86-64-${{ env.times }}-efi-${{ env.EFIMD5 }}.img.gz

        cp ${{ env.FIRMWARE }}/immortalwrt-x86-64-generic-squashfs-combined.img.gz Immortalwrt-x86-64-${{ env.times }}-legacy-${{ env.LEGAMD5 }}.img.gz
                        
    - name: 发布在线更新步骤2
      id: autoupdate2
      uses: softprops/action-gh-release@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_KEY }}
      with:
        files: "${{ env.FIRMWARE }}/Github_Api/*"
        name: AutoUpdate
        tag_name: x86
            
    - name: 发布在线更新步骤3
      id: autoupdate3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        cd ${{ env.FIRMWARE }}
        mkdir -p zzzapi
        cd zzzapi
        curl -H "Authorization: Bearer ${{ secrets.REPO_KEY }}" https://api.github.com/repos/${{github.repository}}/releases/tags/x86 -o zzz_api
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 发布在线更新步骤4
      id: autoupdate4
      uses: softprops/action-gh-release@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_KEY }}
      with:
        files: "${{ env.FIRMWARE }}/zzzapi/zzz_api"
        name: AutoUpdate
        tag_name: x86
        
    - name: 删除旧的自动化编译
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
                        
    - name: 自用消息推送
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: curl "${{ secrets.NOTIAPI }}" -d "title=🅾️恭喜主人main版X86-immortalwrtOS固件编译完成！&desp=🅾️恭喜主人main版X86-immortalwrtOS固件编译完成！🎉%0A⏰编译时间：${{ env.DATE }}%0A📥下载地址：https://github.com/${{github.repository}}/releases/tags/${{ env.TAG_TIME }}"
